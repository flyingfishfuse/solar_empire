#!/usr/bin/perl

use DBI;

sub do_db {
		my $query = shift;
		$db = $dbh->prepare($query);
		$db->execute();
		$db_var = $db->fetchrow_hashref();
		return $db_var->{value};
}

# load configs
open(CONFIG, "config.dat.php");
$check = -1;
while(<CONFIG>){
	$check += 0.5;
	if($check==1){
		$database=$_;
		chomp($database);
		$database =~ tr/\r/\n/;
		chomp($database);
	}elsif($check==2){
		$database_host=$_;
		chomp($database_host);
		$database_host =~ tr/\r/\n/;
		chomp($database_host);
	}elsif($check==3){
		$database_user=$_;
		chomp($database_user);
		$database_user =~ tr/\r/\n/;
		chomp($database_user);
	}elsif($check==4){
		$database_password=$_;
		chomp($database_password);
		$database_password =~ tr/\r/\n/;
		chomp($database_password);
	}elsif($check==6){
		$game_path=$_;
		chomp($game_path);
		$game_path =~ tr/\r/\n/;
		chomp($game_path);
	}elsif($check==7){
		$perl_exec=$_;
		chomp($perl_exec);
		$perl_exec =~ tr/\r/\n/;
		chomp($perl_exec);
	}
}

close(CONFIG);


#connect to the DB. Stage one.
$dbh2||=DBI->connect("DBI:mysql:$database;$database_host",$database_user,$database_password);
kill 9,$$ unless $dbh2;


#=======================================
#Misc
#=======================================


#set the random seed.
#srand(time() ^ ($$ + ($$ << 15)));

#Repair all the generic tables to ensure everything keeps running smoothly. This should mean less server admin intervention required for running the games.
#$dbh2->do("REPAIR TABLE `se_db_vars` , se_admin_ships` , `daily_tips` , `option_list` , `se_games` , `user_accounts` , `user_history`");

#delete accounts that have not been authorised within a week.
$time_to_del_from = time() - 604800;
$dbh2->do("delete from user_accounts where signed_up <= '$time_to_del_from' && session_exp = 0 && login_id > 5 && login_count = 0");

#optimise the two generic tables that are written to on a regular basis.
#$dbh2->do("OPTIMIZE TABLE `se_admin_ships` , `user_accounts` , `user_history` , `se_db_vars`");


#change AI passwords daily. Wouldn't do to have someone get access to them.
$p_pass = rand(1658234) *110 / 2.465 + 789.151 * 759.523;
$dbh2->do("update user_accounts set passwd = '$p_pass' where login_id = '2' || login_id = 3 || login_id = 4 || login_id = 5");

#change the days tip
$tips = $dbh2->prepare("select count(tip_id) as tips from daily_tips");
$tips->execute();
$tip_count = $tips->fetchrow_hashref();
$new_t_id = int(rand($tip_count->{tips} - 1)) + 1;
$dbh2->do("update se_games set todays_tip = '$new_t_id'");


#run the maint but only when maints should be run. This allows lots of games on 1 server to have their maints run at different times using just one maint as their source.
#only works with normal maints where the maint is run at 4am.
$game_db = $dbh2->prepare("select db_name from se_games where status >= 1 && paused != 1");

$game_db->execute();

#loop through games that are allow to have this maint run at this time.
while($games = $game_db->fetchrow_hashref()) {

	#count time taken to run this maint.
	$start_time = time();

	$db_name = $games->{db_name};
	print "Database: $database\n";

	#connect to the DB for this game.
	$dbh||=DBI->connect("DBI:mysql:$database;$database_host",$database_user,$database_password);
	kill 9,$$ unless $dbh;

	#ensure all game related tables are functioning.
	#$dbh->do("REPAIR TABLE `${db_name}_bilkos` , `${db_name}_bmrkt` , `${db_name}_clans` , `${db_name}_diary` , `${db_name}_messages`, `${db_name}_news` , `${db_name}_planets` , `${db_name}_ports` , `${db_name}_ships` , `${db_name}_stars` , `${db_name}_user_options` , `${db_name}_users`");

#Print to news that maint is running.
$dbh->do("insert into ${db_name}_news (timestamp, headline, login_id) values (".time().",'Daily Maintenance Running...','1')");

#Retire OOD players: (6 days not played the game)
$time = time() - (6 * 86400);
$db2 = $dbh->prepare("select clan_id,login_id,login_name from ${db_name}_users where login_id > 5 && joined_game < '$time' && last_request < '$time' && (banned_time < ".time()." || banned_time = 0)");
$db2->execute();

#loop through OOD players, and retire them.
while ($users = $db2->fetchrow_hashref()){

	#determine if player is in a clan
	if ($users->{clan_id} < 1) {
		$db = $dbh->prepare("select leader_id from ${db_name}_clans where clan_id = $users->{clan_id}");
		$db->execute();
		$clan = $db->fetchrow_hashref();
		#if player is in clan, remove the clan.
		if ($clan->{leader_id} == $users->{login_id}) {
			$dbh->do("update ${db_name}_users set clan_id = 0 where clan_id = $users->{clan_id}");
			$dbh->do("update ${db_name}_planets set clan_id = -1 where clan_id = $users->{clan_id}");
			$dbh->do("delete from ${db_name}_clans where clan_id = $users->{clan_id}");
		} else {
			$dbh->do("update ${db_name}_planets set clan_id = -1 where login_id = $users->{login_id}");
		}
	}
	
	$dbh->do("delete from ${db_name}_ships where login_id = $users->{login_id}");
	$dbh->do("delete from ${db_name}_diary where login_id = $users->{login_id}");

	$dbh->do("insert into user_history VALUES ('$users->{login_id}','".time()."','$db_name','Was removed from $db_name after 6 days of in-activity.','','')");

	$dbh->do("delete from ${db_name}_user_options where login_id = $users->{login_id}");
	$dbh->do("delete from ${db_name}_users where login_id = $users->{login_id}");

	$dbh->do("update ${db_name}_politics set login_id = 0, login_name = 0, timestamp = 0 where login_id = $users->{login_id}");

	print $users->{login_name}." Removed\n";

	$dbh->do("insert into ${db_name}_news (timestamp, headline, login_id) values (".time().",'<b class=b1>$users->{login_name}</b> was retired after six days of in-activity.','1')");
}

#
# move blackmarkets to new star systems
#

#get num_stars
$db = $dbh->prepare("select * from ${db_name}_db_vars where name = 'uv_num_stars'");
$db->execute();
$db_var = $db->fetchrow_hashref();
$num_stars = $db_var->{value};

$bm_loop = $dbh->prepare("select bmrkt_id from ${db_name}_bmrkt");
$bm_loop->execute();

#make it so as the game thinks theres a BM in sys 1 already.
$bmrkt_check[1] = 1;

#loop through bms players, and move them.
while ($bm_id = $bm_loop->fetchrow_hashref()){

	$bmrkt_loc = int(rand($num_stars-2)) + 1;
	$check=0;
	while($bmrkt_check[$bmrkt_loc] && $check < 5) {
		$bmrkt_loc = int(rand($num_stars-2)) + 1;
		$check++;
	}
	$dbh->do("update ${db_name}_bmrkt set location = '$bmrkt_loc' where bmrkt_id = '$bm_id->{bmrkt_id}'");
	$bmrkt_check[$bmrkt_loc] = 1;
	print "Blackmarket $bm_id->{bmrkt_id} moved to $bmrkt_loc\n<br>";
}
print "Blackmarkets Done.\n<br>";

#delete from news/forum where messages older than 7 days. (save db space, and make things faster).
#$dbh->do("delete from ${db_name}_news where timestamp < ".time()."-604800 && login_id != -1");
$dbh->do("delete from ${db_name}_messages where timestamp < ".time()."-604800 && login_id = -1");
$dbh->do("delete from ${db_name}_messages where timestamp < ".time()."-259200 && login_id = -5");
#delete user history older than 3 weeks.
$dbh->do("delete from user_history where timestamp < ".time()."-1814400");

$db = $dbh->prepare("select value from ${db_name}_db_vars where name = 'enable_politics'");
$db->execute();
$enable_politics = $db->fetchrow_hashref();

if($enable_politics->{value} == 0) {
	$dbh->do("delete from ${db_name}_politics");
	$dbh->do("INSERT INTO ${db_name}_politics VALUES ( '1', 'Monarch', '0', '', '0')");
	$dbh->do("INSERT INTO ${db_name}_politics VALUES ( '2', 'Industry Senator', '0', '', '0')");
	$dbh->do("INSERT INTO ${db_name}_politics VALUES ( '3', 'Military Senator', '0', '', '0')");
	$dbh->do("INSERT INTO ${db_name}_politics VALUES ( '4', 'Defense Senator', '0', '', '0')");
	$dbh->do("INSERT INTO ${db_name}_politics VALUES ( '5', 'Trade Senator', '0', '', '0')");
	$dbh->do("INSERT INTO ${db_name}_politics VALUES ( '6', 'War Senator', '0', '', '0')");
	$dbh->do("INSERT INTO ${db_name}_politics VALUES ( '7', 'Espionage Senator', '0', '', '0')");
	$dbh->do("INSERT INTO ${db_name}_politics VALUES ( '8', 'Research Senator', '0', '', '0')");

	$dbh->do("update ${db_name}_users set politics = 0");
}

#interest on bounties. (4%)
$dbh->do("update ${db_name}_users set bounty = bounty * 1.04 where bounty > 0");


# Planet Builds
#get requisite admin vars
#number of fighters to be generated per resource bunch.
$db = $dbh->prepare("select value from ${db_name}_db_vars where name = 'planet_fighters'");
$db->execute();
$fighters_per_build = $db->fetchrow_hashref();

#number of electronics per resource bunch
$db = $dbh->prepare("select value from ${db_name}_db_vars where name = 'planet_elect'");
$db->execute();
$elect_per_build = $db->fetchrow_hashref();

#number of organics per resource bunch
$db = $dbh->prepare("select value from ${db_name}_db_vars where name = 'planet_organ'");
$db->execute();
$organ_per_build = $db->fetchrow_hashref();


$blerb = $dbh->prepare("select * from ${db_name}_planets where planet_id != 1");
$blerb->execute();
while($planet = $blerb->fetchrow_hashref()) {
	my $out = "";
	my $out_fighter = "";
	my $out_elect = "";
	my $out_organ = "";

	#fighter production. admin_var per 100 colonists, fuel,metal,electronics.
	if($planet->{alloc_fight} >= 100) {
		$fighter_amount = int($planet->{alloc_fight} / 100);
		if($planet->{fuel} < $fighter_amount) {
			$fighter_amount = $planet->{fuel};
		}
		if($planet->{metal} < $fighter_amount) {
			$fighter_amount = $planet->{metal};
		}
		if($planet->{elect} < $fighter_amount) {
			$fighter_amount = $planet->{elect};
		}
		if($fighter_amount > 0) {
			$dbh->do("update ${db_name}_planets set fighters = fighters + ($fighter_amount * $fighters_per_build->{value}), fuel = fuel - $fighter_amount, metal = metal - $fighter_amount, elect = elect - $fighter_amount where planet_id = ".$planet->{planet_id});
			$planet->{elect} -= $fighter_amount;
			$planet->{fuel} -= $fighter_amount;
			$planet->{metal} -= $fighter_amount;
			$temp556 = $fighter_amount * $fighters_per_build->{value};
			$out_fighter = "<p>Fuel Used: <b>$fighter_amount</b><br>Metal Used: <b>$fighter_amount</b><br>Electronics Used: <b>$fighter_amount</b><br>Colonists Assigned: <b>$planet->{alloc_fight}</b><br>Produced: <b>$temp556</b> <b class=b1>Fighters</b>.";
			print "$temp556 fighters built on ".$planet->{planet_name}."\n";
		}
	}

	#Electronics production. admin_var per 500 colonists, 10 fuel, & 10 metal (assigned).
	if($planet->{alloc_elect} >= 500) {
		$elect_amount = int($planet->{alloc_elect} / 500);
		if($planet->{fuel} < $elect_amount * 10) {
			$elect_amount = int($planet->{fuel} * 0.1);
		}
		if($planet->{metal} < $elect_amount * 10) {
			$elect_amount = int($planet->{metal} * 0.1);
		}
		if($elect_amount > 0) {
			$dbh->do("update ${db_name}_planets set elect = elect + ($elect_amount * $elect_per_build->{value}), fuel = fuel - $elect_amount * 10, metal = metal - $elect_amount * 10 where planet_id = ".$planet->{planet_id});
			$out_elect = "Fuel Used: <b>$elect_amount</b><br>Metal Used: <b>$elect_amount</b><br>Colonists Assigned: <b>$planet->{alloc_elect}</b><br>Produced: <b>$elect_amount</b> <b class=b1>Electronics</b>.";
			print "$elect_amount electronics built on ".$planet->{planet_name}."\n";
		}
	}

	#Organics production. 1 per 450 colonists assigned.
	if($planet->{alloc_organ} >= $organ_per_build->{value}) {
		$organ_amount = int($planet->{alloc_organ} / $organ_per_build->{value});
		$dbh->do("update ${db_name}_planets set organ = organ + $organ_amount where planet_id = $planet->{planet_id}");
		$out_organ = "Colonists Assigned: <b>$planet->{alloc_organ}</b><br>Produced: <b>$organ_amount</b> <b class=b1>Organics</b>.";
		print "$organ_amount Organics built on $planet->{planet_name}\n";
	}

	if($planet->{planet_type} >= 0){
		my $out_tax = "";
		my $out_inc = "";
		my $temp_var_alpha = 0;
		#Confirm if something got manufactured.
		if($out_elect || $out_fighter || $out_organ){
			$temp_var_alpha = 1;
			$out = "Manufacturing: <ul>".$out_organ.$out_elect.$out_fighter."</ul>";
		} else {
			$out = "Manufacturing: <b>Nothing</b><br>";
		}

		#Confirm if anything happens to colonists.
		$temp494 = $planet->{colon} - $planet->{alloc_fight} - $planet->{alloc_elect} - $planet->{alloc_organ};

		$t_cash = int($temp494 * $planet->{tax_rate} * 0.01);
		if($t_cash){
			$out_tax = "<br><b>$temp494</b> Colonists Taxed @<b>$planet->{tax_rate}</b>%<br><b>$t_cash</b> Income.";
		}

		if($planet->{tax_rate} == 20){$a_number = 0.70;}
		elsif($planet->{tax_rate} == 19){$a_number = 0.72;}
		elsif($planet->{tax_rate} == 18){$a_number = 0.75;}
		elsif($planet->{tax_rate} == 17){$a_number = 0.80;}
		elsif($planet->{tax_rate} == 16){$a_number = 0.85;}
		elsif($planet->{tax_rate} == 15){$a_number = 0.90;}
		elsif($planet->{tax_rate} == 14){$a_number = 0.93;}
		elsif($planet->{tax_rate} == 13){$a_number = 0.96;}
		elsif($planet->{tax_rate} == 12){$a_number = 0.98;}
		elsif($planet->{tax_rate} == 11){$a_number = 1.02;}
		elsif($planet->{tax_rate} == 10){$a_number = 1.05;}
		elsif($planet->{tax_rate} == 9){$a_number = 1.08;}
		elsif($planet->{tax_rate} == 8){$a_number = 1.10;}
		elsif($planet->{tax_rate} == 7){$a_number = 1.12;}
		elsif($planet->{tax_rate} == 6){$a_number = 1.14;}
		elsif($planet->{tax_rate} == 5){$a_number = 1.16;}
		elsif($planet->{tax_rate} == 4){$a_number = 1.20;}
		elsif($planet->{tax_rate} == 3){$a_number = 1.22;}
		elsif($planet->{tax_rate} == 2){$a_number = 1.25;}
		elsif($planet->{tax_rate} == 1){$a_number = 1.28;}
		elsif($planet->{tax_rate} == 0){$a_number = 1.30;}
		$t_inc = int($temp494 * $a_number + $planet->{alloc_fight} + $planet->{alloc_elect} + $planet->{alloc_organ}) - $planet->{colon};
		if($t_inc > 0) {
			$out_inc = "<b>$temp494</b> Colonists Reproduced<br><b>$t_inc</b> More Colonists Created.";
		} elsif($t_inc < 0) {
			$out_inc = "<b>$temp494</b> Colonists Reproduced<br><b>$t_inc</b> Colonists Lost.";
		}

		if($t_cash || $t_inc){
			$out .= "Colonists: <ul>".$out_inc.$out_tax."</ul>";
		} else {
			$out .= "Colonists: <b>Nothing</b>";
		}

		#print out report, but only when player would like one (as specified by user options).
		if($planet->{daily_report} == 2 || ($planet->{daily_report} == 1 && $temp_var_alpha == 1)){
			$dbh->do("insert into ${db_name}_messages (timestamp,sender_name,sender_id, login_id, text) values(".time().",'Maint','$planet->{login_id}','$planet->{login_id}','Your planet <b class=b1>$planet->{planet_name}</b> has been processed, and the following has changed:<p>$out')");
		}
	}
}

#Taxes!
$dbh->do("update ${db_name}_planets set cash = cash + ((colon - alloc_fight - alloc_elect - alloc_organ) * tax_rate * .01)");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 1.30 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 0");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 1.28 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 1");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 1.25 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 2");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 1.22 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 3");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 1.20 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 4");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 1.16 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 5");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 1.14 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 6");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 1.12 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 7");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 1.10 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 8");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 1.08 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 9");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 1.05 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 10");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 1.02 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 11");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 0.98 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 12");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 0.96 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 13");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 0.93 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 14");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 0.90 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 15");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 0.85 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 16");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 0.80 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 17");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 0.75 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 18");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 0.72 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 19");
$dbh->do("update ${db_name}_planets set colon = (colon - alloc_fight - alloc_elect - alloc_organ) * 0.70 + alloc_fight + alloc_elect + alloc_organ where tax_rate = 20");
print "Planets Done\n";
# generate port prices

# random resouce regeneration
$metal_chance = do_db("select * from ${db_name}_db_vars where name = 'rr_metal_chance'");
$metal_chance_min = do_db("select * from ${db_name}_db_vars where name = 'rr_metal_chance_min'");
$metal_chance_max = do_db("select * from ${db_name}_db_vars where name = 'rr_metal_chance_max'");
$fuel_chance = do_db("select * from ${db_name}_db_vars where name = 'rr_fuel_chance'");
$fuel_chance_min = do_db("select * from ${db_name}_db_vars where name = 'rr_fuel_chance_min'");
$fuel_chance_max = do_db("select * from ${db_name}_db_vars where name = 'rr_fuel_chance_max'");
$db = $dbh->prepare("select count(*) AS num_stars from ${db_name}_stars");
$db->execute();
$num_stars = $db->fetchrow_hashref();

for($ct = 2;$ct <= $num_stars->{num_stars};$ct++) {
	 if(rand(100) < $metal_chance)	{
		 $temp = int(rand($metal_chance_max - $metal_chance_min)) + $metal_chance_min;
		 $dbh->do("update ${db_name}_stars set metal = metal + $temp where star_id = $ct");
		 print("#$ct gets $temp more metal\n");
	 }
	 if(rand(100) < $fuel_chance) {
		 $temp = int(rand($fuel_chance_max - $fuel_chance_min)) + $fuel_chance_min;
		 $dbh->do("update ${db_name}_stars set fuel = fuel + $temp where star_id = $ct");
		 print("#$ct gets $temp more fuel\n");
	 }
}

print "Resource Regen Done\n";

# Days left in game counter
$dbh->do("update ${db_name}_db_vars set value = value - 1 where name = 'count_days_left_in_game' && value > 0");



$db = $dbh->prepare("select value AS value from ${db_name}_db_vars where name = 'random_events'");
$db->execute();
$db_var = $db->fetchrow_hashref();
$rand = $db_var->{value};


#supernova remnant to blackhole
$db = $dbh->prepare("select star_id from ${db_name}_stars where event_random = '6'");
$db->execute();
$bh_sys = $db->fetchrow_hashref();

if ($bh_sys) {
	$chance = rand(5);
	if ($chance < 1) {
		$dbh->do("update ${db_name}_stars set event_random = 1, metal = '0', fuel='0', star_name = 'BlackHole' where star_id = '$bh_sys->{star_id}'");
		$dbh->do("insert into ${db_name}_news (timestamp, headline, login_id) values (".time().",'The <b>SuperNova Remnant</b> in <b class=b1>system $bh_sys->{star_id}</b> has formed into a <b>blackhole</b>. Being a slow process, all ships managed to get out to system #<b>1</b>. We expect no further trouble from that system. <font color=lime>- - - Science Institute of Sol - - -</font>','-11')");
		
		$db = $dbh->prepare("select location,login_id,ship_id,ship_name from ${db_name}_ships where location = '$bh_sys->{star_id}'");
		$db->execute();
		while ($ship_bh = $db->fetchrow_hashref()) {
			$dbh->do("update ${db_name}_ships set location = '1' where ship_id = '$ship_bh->{ship_id}'");
			$dbh->do("insert into ${db_name}_messages (timestamp,sender_name,sender_id, login_id, text) values(".time().",'BlackHole','$ship_bh->{login_id}','$ship_bh->{login_id}','Your ship the <b class=b1>$ship_bh->{ship_name}</b> escaped a blackhole forming from a SuperNova Remnant in system #<b>$ship_bh->{location}</b>. It is now in system #<b>1</b>')");
		}
		$dbh->do("update ${db_name}_users set location = '1' where location = '$bh_sys->{star_id}'");
		print "\nSN remnant in $bh_sys->{star_id} to blackhole\n";
	} elsif ($chance > 2.5) {
		$dbh->do("update ${db_name}_stars set event_random = '14' where star_id = '$bh_sys->{star_id}'");
		$dbh->do("insert into ${db_name}_news (timestamp, headline, login_id) values (".time().",'After much study, we have decided that the star in system <b>$bh_sys->{star_id}</b> will <b class=b1>not</b> become a Blackhole, as it was not massive enough. This system will remain a harmless Super-Nova Remnant, with lots of minerals in. <font color=lime>- - - Science Institute of Sol - - -</font>','-11')");
		print "\nSN remnant in $bh_sys->{star_id} safe\n";
	}
}


#SuperNova > supernova remnant
$db = $dbh->prepare("select star_id,event_random from ${db_name}_stars where event_random = '5' || event_random = '11'");
$db->execute();
$sn_sys = $db->fetchrow_hashref();

if ($sn_sys->{event_random} == 5) {
	$chance = rand(2);
	if ($chance > 1.7) {
		$dbh->do("update ${db_name}_stars set event_random = 0, star_name = 'Slimane' where star_id = '$sn_sys->{star_id}'");
		$dbh->do("insert into ${db_name}_news (timestamp, headline, login_id) values (".time().",'The scare about the Supernova in system <b>$sn_sys->{star_id}</b> is over. It seems a technician (<b>first class</b>) called <b class=b1>\"Rimmer\"</b> spilt some coffee over an instrument panel causing a false reading. We apologise for any terror caused. <font color=lime>- - - Science Institute of Sol - - -</font>','-11')");
		print "\nSupernova in $sn_sys->{star_id} was a dud.\n";
	} elsif ($chance < .8) {
		&explode_sn($sn_sys);
	}

} elsif($sn_sys->{event_random} == 11) {
	&explode_sn($sn_sys);
}

#Sets num 10 random events to lvl 11.
$dbh->do("update ${db_name}_stars set event_random = '11' where event_random = '10'");


# adds random things
if ($rand > 1) {

	$temp = (1000 / ($rand * $num_stars->{num_stars})) + 1;
	$chance = int(rand($temp));

	if ($chance ==0) { #metal rush
		$to_go = int(rand($num_stars->{num_stars} - 3)) +2;
		$db = $dbh->prepare("select event_random from ${db_name}_stars where star_id = '$to_go'");
		$db->execute();
		$is_it = $db->fetchrow_hashref();
		if ($is_it->{event_random} == 0) {
			$dbh->do("update ${db_name}_stars set event_random = 4, metal ='99999', fuel='0' where star_id = '$to_go'");
			$dbh->do("insert into ${db_name}_news (timestamp, headline, login_id) values (".time().",'Breaking news. A huge metal depost has been found in <b class=b1>system $to_go</b> this deposit seems limitless, but could run out at any time. Metal mining rates for all ships in that system will be <b>quadrupled</b> until the deposit runs out.','-10')");
			print "\nRandom event, type 4 placed.\n";
		}
	}

	if ($rand > 2) {#togosupernova
		$temp = 40 / (int($num_stars->{num_stars} / 100) + 1);
		$chance = int(rand($temp));
		#supernova!!!!!!!
		if ($chance ==1) {
			$to_go = int(rand($num_stars->{num_stars} -3)) +2;
			$dbh->do("update ${db_name}_stars set event_random = 5, metal = 0, fuel =0, star_name = 'SuperNova' where star_id = '$to_go' && event_random = 0");
			$dbh->do("insert into ${db_name}_news (timestamp, headline, login_id) values (".time().",'Scientists report that the star in <b class=b1>system $to_go</b> is most likely going to go <b>Supernova(Explode)</b> in the next 24-72 hours, destroying <b class=b1>EVERYTHING</b> in the system. <font color=lime>- - - Science Institute of Sol - - -</font>','-11')");
			print "\nSupernova in $to_go.\n";
		}
	}

} elsif($rand < 1) {
	$dbh->do("update ${db_name}_stars set event_random = 0 where event_random > 0");
}

#SuperNova Going bang.
sub explode_sn {
		$dbh->do("update ${db_name}_stars set event_random = 6, metal = '583720', fuel='948372', star_name = 'SuperNova Remnant' where star_id = '$sn_sys->{star_id}'");
		$dbh->do("insert into ${db_name}_news (timestamp, headline, login_id) values (".time().",'The star in <b class=b1>system $sn_sys->{star_id}</b> has exploded destroying everything in the system, and leaving a <b class=b1>Supernova Remnant</b> which is extremly rich in metals and fuel. All adjoining systems have also recieved generous quantities of minerals. We believe the SuperNova Remnant will turn into a <b>Blackhole</b> over due course.<font color=lime>- - - Science Institute of Sol - - -</font>','-11')");

		#take out non-eps.
		$db = $dbh->prepare("select * from ${db_name}_ships where location = '$sn_sys->{star_id}' && login_id !='1'");
		$db->execute();
		while ($ship_sn = $db->fetchrow_hashref()) {
			if ($ship_sn->{shipclass} != 2) {
				$dbh->do("insert into ${db_name}_messages (timestamp,sender_name,sender_id, login_id, text) values(".time().",'SuperNova','$ship_sn->{login_id}','$ship_sn->{login_id}','Your ship the <b class=b1>$ship_sn->{ship_name}</b> was destroyed by an exploding star (<b>Supernova</b>) in system #<b>$ship_sn->{location}</b>')");
				$dbh->do("delete from ${db_name}_ships where ship_id = '$ship_sn->{ship_id}'");
				$dbh->do("insert into ${db_name}_news (timestamp, headline, login_id) values (".time().",'$ship_sn->{login_name} lost a $ship_sn->{class_name} to the SuperNova in system #<b>$ship_sn->{location}<b>','$ship_sn->{login_id}')");
			} else {
				$dbh->do("insert into ${db_name}_messages (timestamp,sender_name,sender_id, login_id, text) values(".time().",'SuperNova','$ship_sn->{login_id}','$ship_sn->{login_id}','Your <b>Escape Pod</b> was near a star when it exploded. Fortunatly is was not hurt by the explosion, but was flung to a different system. Some well-wisher then brought you to system #1.')");
				$dbh->do("update ${db_name}_users set location = '1' where ship_id = '$ship_sn->{ship_id}'");
				$dbh->do("update ${db_name}_ships set location = '1' where login_id = '$ship_sn->{login_id}'");
			}
		}

		#take out non admin planets
		$db = $dbh->prepare("select * from ${db_name}_planets where location = '$sn_sys->{star_id}' && login_id != '1'");
		$db->execute();
		while ($planet_sn = $db->fetchrow_hashref()) {
			$dbh->do("insert into ${db_name}_messages (timestamp,sender_name,sender_id, login_id, text) values(".time().",'SuperNova','$planet_sn->{login_id}','$planet_sn->{login_id}','Your planet (<b class=b1>$planet_sn->{planet_name}</b>) was oblterated by an exploding star (<b>Supernova</b>) in system #<b>$planet_sn->{location}. It no longer exists, nor does anything that was on it.')");
			$dbh->do("delete from ${db_name}_planets where planet_id = $planet_sn->{planet_id}");
			$dbh->do("insert into ${db_name}_news (timestamp, headline, login_id) values (".time().",'The planet $planet_sn->{planet_name} was totally destroyed by the SuperNova in system #<b>$planet_sn->{location}<b>','$planet_sn->{login_id}')");
		}

	#move users to sol or next ship
	$db2 = $dbh->prepare("select * from ${db_name}_users where location = '$sn_sys->{star_id}' && login_id > '3' && ship_id != 1");
	$db2->execute();

	while($users = $db2->fetchrow_hashref()) {
		$db = $dbh->prepare("select * from ${db_name}_ships where login_id = '$users->{login_id}' && login_id != 1");
		$db->execute();
		if($other = $db->fetchrow_hashref()) {
			$dbh->do("update ${db_name}_users set ship_id = '$other->{ship_id}', location = '$other->{location}' where login_id = '$other->{login_id}'");
			$dbh->do("insert into ${db_name}_messages (timestamp,sender_name,sender_id, login_id, text) values(".time().",'SuperNova','$users->{login_id}','$users->{login_id}','Command was transfered to the <b class=b1>$other->{ship_name}</b>.')");
		} else {
			$dbh->do("insert into ${db_name}_messages (timestamp,sender_name,sender_id, login_id, text) values(".time().",'SuperNova','$users->{login_id}','$users->{login_id}','You ejected in an escape pod.')");
			$dbh->do("insert into ${db_name}_ships (ship_name, login_id, login_name, shipclass, class_name, location, point_value) values('Escape Pod','$users->{login_id}','$users->{login_name}',2,'Escape Pod','1',5)");
			#$dbh->do($q_string);
			$db = $dbh->prepare("select * from ${db_name}_ships where login_id = '$users->{login_id}'");
			$db->execute();
			$ship_id = $db->fetchrow_hashref();
			$dbh->do("update ${db_name}_users set location = '1', ship_id ='$ship_id->{ship_id}' where login_id = '$users->{login_id}'");
		}
	}


	$db = $dbh->prepare("select * from ${db_name}_stars where star_id = '$sn_sys->{star_id}'");
	$db->execute();
	$link = $db->fetchrow_hashref();
	$link_1 = $link->{link_1};
	$link_2 = $link->{link_2};
	$link_3 = $link->{link_3};
	$link_4 = $link->{link_4};
	$link_5 = $link->{link_5};
	$link_6 = $link->{link_6};

	$dbh->do("update ${db_name}_stars set fuel= fuel +'103482', metal= metal+'12354' where star_id != '1' && star_id != 0 && star_id = '$link_1'");
	$dbh->do("update ${db_name}_stars set fuel= fuel +'95444', metal= metal+'56484' where star_id != '1' && star_id != 0 && star_id = '$link_2'");
	$dbh->do("update ${db_name}_stars set fuel= fuel +'74452', metal= metal+'46877' where star_id != '1' && star_id != 0 && star_id = '$link_3'");
	$dbh->do("update ${db_name}_stars set fuel= fuel +'37353', metal= metal+'106210' where star_id != '1' && star_id != 0 && star_id = '$link_4'");
	$dbh->do("update ${db_name}_stars set fuel= fuel +'74523', metal= metal+'68757' where star_id != '1' && star_id != 0 && star_id = '$link_5'");
	$dbh->do("update ${db_name}_stars set fuel= fuel +'63452', metal= metal+'83254' where star_id != '1' && star_id != 0 && star_id = '$link_6'");
	print "\nSupernova in $sn_sys->{star_id} went bang.\n";
}

#optimise & repair any used game related tables.
#$dbh->do("REPAIR TABLE `${db_name}_bilkos`, `${db_name}_clans` , `${db_name}_diary` , `${db_name}_messages` , `${db_name}_news` , `${db_name}_planets` , `${db_name}_ships` , `${db_name}_stars` , `${db_name}_user_options` , `${db_name}_users`");
#$dbh->do("OPTIMIZE TABLE `${db_name}_bilkos`, `${db_name}_clans` , `${db_name}_diary` , `${db_name}_messages` , `${db_name}_news` , `${db_name}_planets` , `${db_name}_ships` , `${db_name}_stars` , `${db_name}_user_options` , `${db_name}_users`");

#`$perl_exec $game_path\\build_vars.pl $db_name`;


#finish counting time taken to run this maint.
$total_time = time() - $start_time;

$dbh->do("insert into ${db_name}_news (timestamp, headline, login_id) values (".time().",'...Daily Maintenance Complete in <b>$total_time</b> seconds','1')");

		if($db) {
			$db->finish;
		}
		if($db2) {
			$db2->finish;
		}
		$dbh->disconnect() if $dbh;
		undef $dbh;
}
